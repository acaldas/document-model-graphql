diff --git a/node_modules/graphql-codegen-typescript-validation-schema/dist/main/zod/index.js b/node_modules/graphql-codegen-typescript-validation-schema/dist/main/zod/index.js
index f7faae6..12c2609 100644
--- a/node_modules/graphql-codegen-typescript-validation-schema/dist/main/zod/index.js
+++ b/node_modules/graphql-codegen-typescript-validation-schema/dist/main/zod/index.js
@@ -101,12 +101,13 @@ const generateFieldZodSchema = (config, tsVisitor, schema, field, indentCount) =
     return (0, visitor_plugin_common_1.indent)(`${field.name.value}: ${maybeLazy(field.type, gen)}`, indentCount);
 };
 const generateFieldTypeZodSchema = (config, tsVisitor, schema, field, type, parentType) => {
+    const nullType = field.kind === 'InputValueDefinition' ? "nullish" : "nullable";
     if ((0, graphql_1.isListType)(type)) {
         const gen = generateFieldTypeZodSchema(config, tsVisitor, schema, field, type.type, type);
         if (!(0, graphql_1.isNonNullType)(parentType)) {
             const arrayGen = `z.array(${maybeLazy(type.type, gen)})`;
             const maybeLazyGen = applyDirectives(config, field, arrayGen);
-            return `${maybeLazyGen}.nullish()`;
+            return `${maybeLazyGen}.${nullType}()`;
         }
         return `z.array(${maybeLazy(type.type, gen)})`;
     }
@@ -117,7 +118,7 @@ const generateFieldTypeZodSchema = (config, tsVisitor, schema, field, type, pare
     if ((0, graphql_1.isNamedType)(type)) {
         const gen = generateNameNodeZodSchema(config, tsVisitor, schema, type.name);
         if ((0, graphql_1.isListType)(parentType)) {
-            return `${gen}.nullable()`;
+            return `${gen}.${nullType}()`;
         }
         const appliedDirectivesGen = applyDirectives(config, field, gen);
         if ((0, graphql_1.isNonNullType)(parentType)) {
@@ -129,9 +130,9 @@ const generateFieldTypeZodSchema = (config, tsVisitor, schema, field, type, pare
             return appliedDirectivesGen;
         }
         if ((0, graphql_1.isListType)(parentType)) {
-            return `${appliedDirectivesGen}.nullable()`;
+            return `${appliedDirectivesGen}.${nullType}()`;
         }
-        return `${appliedDirectivesGen}.nullish()`;
+        return `${appliedDirectivesGen}.${nullType}()`;
     }
     console.warn('unhandled type:', type);
     return '';
diff --git a/node_modules/graphql-codegen-typescript-validation-schema/dist/src/zod/index.js b/node_modules/graphql-codegen-typescript-validation-schema/dist/src/zod/index.js
index ec90f8e..d9ae1b6 100644
--- a/node_modules/graphql-codegen-typescript-validation-schema/dist/src/zod/index.js
+++ b/node_modules/graphql-codegen-typescript-validation-schema/dist/src/zod/index.js
@@ -115,7 +115,7 @@ const generateFieldTypeZodSchema = (config, tsVisitor, schema, field, type, pare
         if (!(0, graphql_1.isNonNullType)(parentType)) {
             const arrayGen = `z.array(${maybeLazy(type.type, gen)})`;
             const maybeLazyGen = applyDirectives(config, field, arrayGen);
-            return `${maybeLazyGen}.nullish()`;
+            return `${maybeLazyGen}.nullable()`;
         }
         return `z.array(${maybeLazy(type.type, gen)})`;
     }
@@ -140,7 +140,7 @@ const generateFieldTypeZodSchema = (config, tsVisitor, schema, field, type, pare
         if ((0, graphql_1.isListType)(parentType)) {
             return `${appliedDirectivesGen}.nullable()`;
         }
-        return `${appliedDirectivesGen}.nullish()`;
+        return `${appliedDirectivesGen}.nullable()`;
     }
     console.warn('unhandled type:', type);
     return '';
